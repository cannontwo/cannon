#include <iostream>
#include <cassert>
#include <cmath>

#include <cannon/log/registry.hpp>

using namespace cannon::log;

/*!
 * Pentagonal numbers are generated by the formula, P_n = n * (3*n - 1) / 2. The
 * first ten pentagonal numbers are:
 *
 *   1, 5, 12, 22, 35, 51, 70, 92, 117, 145
 *
 * It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their
 * difference, 70 - 22 = 48, is not pentagonal. Find the pair of pentagonal
 * numbers, P_j and P_k, for which their sum and difference are pentagonal and D
 * = |P_k - P-j| is minimized; what is the value of D?
 */

bool is_pentagonal(unsigned int x) {
  // A number x is pentagonal if 3n^2 - n - 2x has a positive integer zero in n. 
  
  double sqrt_part = std::sqrt(1 + 24 * x);
  if (std::floor(sqrt_part) == sqrt_part) {
    return ((1 + static_cast<unsigned int>(sqrt_part)) % 6) == 0;
  } else
    return false;
}

unsigned int compute_pentagonal(unsigned int n) {
  return n * (3*n - 1) / 2;
}

unsigned int compute_minimal_pentagonal_diff() {
  unsigned int i = 1;
  while (true) {
    unsigned int p_i = compute_pentagonal(i);

    for (unsigned int j = 1; j < i; j++) {
      unsigned int p_j = compute_pentagonal(j);

      if (is_pentagonal(p_i + p_j) && is_pentagonal(p_i - p_j)) {
        log_info("Found a pair of pentagonal numbers with the property:", p_i,
                 ",", p_j);

        log_info("Smallest diff is", p_i - p_j);
        return p_i - p_j;
      }
    }

    ++i;
  }
}

int main(int argc, char **argv) {
  std::cout << compute_minimal_pentagonal_diff() << std::endl;
}
