#ifndef CANNON_GEOM_KD_TREE_H
#define CANNON_GEOM_KD_TREE_H 

#include <Eigen/Dense>
#include <CGAL/Epeck_d.h>
#include <CGAL/Search_traits_d.h>
#include <CGAL/Kd_tree.h>

#include <cannon/log/registry.hpp>

using namespace Eigen;
using namespace cannon::log;

namespace cannon {
  namespace geom {

    template <unsigned int dim>
    class KDTree {
      public:
        using Kernel = CGAL::Epeck_d<CGAL::Dimension_tag<dim>>;
        using Point_d = typename Kernel::Point_d;
        using Traits = CGAL::Search_traits_d<Kernel, CGAL::Dimension_tag<dim>>;
        using Tree = CGAL::Kd_tree<Traits>;

        KDTree() {}

        void insert(const VectorXd& p) {
          Point_d tmp(std::begin(p), std::end(p));
          log_info("Inserting point", tmp);
        }

      private:
        Tree tree_;
    };
    
  } // namespace geom
} // namespace cannon

#endif /* ifndef CANNON_GEOM_KD_TREE_H */
